rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp
tickers=ukximport[1,1,1]$tickers#
names=ukximport[2,1,1]$names#
sector=ukximport[3,1,1]$sector#
dt=Matlab2Rdate(ukximport[4,1,1]$dt)#
Index=ukximport[5,1,1]$Index#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])
ret[is.na(ret)]=0
ret[is.infinite(ret)]=0
w
dim(w)
dim(px_clean)
dim(px.clean)
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))
as.Date(dt[1])
dt[1]
dt
dt=Matlab2Rdate(ukximport[4,1,1]$dt)
dt
tickers
tickers=ukximport[1,1,1]$tickers
tickers
tickers=ukximport[2,1,1]$tickers
tickers
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))
days
sum(days)
dim(dt)
4068-4049
days=c(days,19)
4068/365
years=rep(0,11)
years[1]=sum(days[1:12])#
for(i in 2:24){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}
years
years=rep(0,11)#
years[1]=sum(days[1:12])#
for(i in 2:10){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}
years
length(days)
12*11
years[25]=sum(days[133:134])
years
years=rep(0,11)#
years[1]=sum(days[1:12])#
for(i in 2:10){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[11]=sum(days[133:134])
years
w=rbind(w,rep(0,ncol(w)))
w
dim(w)
dim(dt)
w=rbind(w,rep(0,ncol(w)))
dim(dt)
dim(w)
rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp #
#
#aquire data#
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean#
#
#calculate daily log-returns#
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0#
#
#days in each month#
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))#
days=c(days,19)#
w=rbind(w,rep(0,ncol(w)))
years=rep(0,11)#
years[1]=sum(days[1:12])#
for(i in 2:10){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[11]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=11,ncol=dim(w)[2])#
for(i in 1:11){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}#
#
#100 stock in chosen index#
index2.100=index.retN(100,w.jan.days,ret)#
ret2.100=index2.100[[1]]#
cumul2.100=index2.100[[2]]
dim(ret)
dim(w.jan.days)
nrow(ret)
years
w.jan
w.jan.days
dim(w.jan.days)
sum(days)
years
sum(years)
4068/365
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:10){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[11]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=11,ncol=dim(w)[2])#
for(i in 1:11){#
	w.jan[i,]=w[1+(i-1)*12,]#
}
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]#
#
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
w.jan
w.jan.days
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:10){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=11,ncol=dim(w)[2])#
for(i in 1:11){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=11,ncol=dim(w)[2])#
for(i in 1:11){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:11){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}
index2.100=index.retN(100,w.jan.days,ret)#
ret2.100=index2.100[[1]]#
cumul2.100=index2.100[[2]]#
#
#diagnostic check#
sd(ret2.100-index.ret2)
index2.100=index.retN(50,w.jan.days,ret)
ts.plot(cumul.index.ret2)
nrow(w.jan.days)
dim(w.jan.days)
dim(ret)
index.retN=function(N,weights,returns){#
	index.retN=vector("numeric"); cumul.index.retN=vector("numeric")#
	cumul.index.retN[1]=100#
	index.matrix=indexN(N,weights)#
	for(i in 1:nrow(returns)){#
		index.retN[i]=sum(returns[i,][index.matrix[i,]]*weights[i,][index.matrix[i,]])#
		cumul.index.retN[i+1]=cumul.index.retN[i]*(1+index.retN[i])#
	}#
	return(list(index.retN,cumul.index.retN))#
}
index2.100=index.retN(50,w.jan.days,ret)
ret2.100=index2.100[[1]]
cumul2.100=index2.100[[2]]
sd(ret2.100-index.ret2)
index2.100
nrow(returns)
nrow(ret)
index.ret2
cumul.index.ret2
dim(ret)
ret[4065,]
w.jan.days[4065,]
w.jan.days
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:12){#
	w.jan[i,]=w[1+(i-1)*12,]#
}
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}
index2.100=index.retN(50,w.jan.days,ret)
ret2.100=index2.100[[1]]
cumul2.100=index2.100[[2]]
sd(ret2.100-index.ret2)
par(mfrow=c(2,1))#
ts.plot(index.ret2,main="S&P 500 1.1.1990-19.3.2014",ylab="Daily log-returns of index")#
lines(ret2.100,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 100 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
ts.plot(cumul.index.ret2,main="S&P 500 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")#
lines(cumul2.100,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 100 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)
index2.30=index.retN(30,w.jan.days,ret)#
ret2.30=index2.30[[1]]#
cumul2.30=index2.30[[2]]#
#
#diagnostic check#
sd(ret2.30-index.ret2)
par(mfrow=c(2,1))#
ts.plot(index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily log-returns of index")#
lines(ret2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
ts.plot(cumul.index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")#
lines(cumul2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)
create.spread.opt(cumul.index.ret,cumul100,0.4,0.05)
create.spread.opt(cumul.index.ret2,cumul100,0.4,0.05)
create.spread.opt(cumul.index.ret2,cumul2.30,0.4,0.05)
from2=4; to2=20; by2=4; days2=180; cor_thresh2=0.9; pval_thresh2=0.01#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		spread2=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.j2[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[1]]#
		print(c(spread2,i))#
	}#
	rm(spread2,index.j2,i,j)#
}
maxlag2=12*(days2/100)^0.25#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		cumul.ret.all2=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])#
		cumul.ret.j2=log(index.j2[(days2*(i-1)):(days2*i)])#
		data2=data.frame(cumul.ret.all2,cumul.ret.j2)#
		varest2=VAR(data2,p=1,type="const",lag.max=maxlag2,ic="AIC")#
		lagLength2=max(maxlag2,varest2$p)#
		res2=ca.jo(data2,type="trace",ecdet="const",K=lagLength2,spec="transitory")#
		testStatistics2=res2@teststat#
		criticalValues2=res2@cval#
		if(testStatistics2[length(testStatistics2)] >= criticalValues2[length(testStatistics2)+4]){#
  			print(c(res2@V[1:(ncol(data2)+1),which.max(res2@lambda)],i))#
  		}#
	}#
	rm(index.j2,cumul.ret.all2,cumul.ret.j2,data2,varest2,lagLength2,res2,testStatistics2,criticalValues2,i,j)#
}
### optimal to use 8 stocks#
index.20=index.retN(8,w.jan.days,ret)[[2]]#
i=2#
spreadin3=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin3=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin3=index.20[(days2*(i-1)):(days2*i)]#
#
i=1#
spreadout3=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.290711*log(index.20[(days2*(i-1)):(days2*i)])+10.642420#
stockAout3=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout3=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin3); lines(spreadout3,col="red")#
#
####
i=8#
spreadin9=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin9=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin9=index.20[(days2*(i-1)):(days2*i)]#
#
i=7#
spreadout9=log(index.20[(days2*(i-1)):(days2*i)])-0.2673692*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.3771963#
stockBout9=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout9=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin9); lines(spreadout9,col="red")#
#
####
i=12#
spreadin11=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin11=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin11=index.20[(days2*(i-1)):(days2*i)]#
#
i=11#
spreadout11=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.160233*log(index.20[(days2*(i-1)):(days2*i)])+9.950650#
stockAout11=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout11=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin11); lines(spreadout11,col="red")#
#
####
i=16#
spreadin17=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin17=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin17=index.20[(days2*(i-1)):(days2*i)]#
#
i=15#
spreadout17=log(index.20[(days2*(i-1)):(days2*i)])-0.2716707*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.4214602#
stockBout17=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout17=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin17); lines(spreadout17,col="red")#
#
####
i=20#
spreadin31=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin31=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin31=index.20[(days2*(i-1)):(days2*i)]#
#
i=19#
spreadout31=log(index.20[(days2*(i-1)):(days2*i)])-0.2855611*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.3344949#
stockBout31=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout31=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin31); lines(spreadout31,col="red")
par(mfrow=c(4,3))#
ts.plot(spreadin3)#
ts.plot(spreadin9)#
ts.plot(spreadin11)#
ts.plot(spreadout3,col="red")#
ts.plot(spreadout9,col="red")#
ts.plot(spreadout11,col="red")#
ts.plot(spreadin17)#
ts.plot(spreadin31)#
ts.plot(spreadout17,col="red")#
ts.plot(spreadout31,col="red")
ts.plot(spreadout3,col="red")
index.20=index.retN(8,w.jan.days,ret)[[2]]#
i=2#
spreadin2uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin2uk=index.20[(days2*(i-1)):(days2*i)]#
#
i=1#
spreadout2uk=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.290711*log(index.20[(days2*(i-1)):(days2*i)])+10.642420#
stockAout2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout2uk=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin2uk); lines(spreadout2uk,col="red")#
#
####
i=8#
spreadin8uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin8uk=index.20[(days2*(i-1)):(days2*i)]#
#
i=7#
spreadout8uk=log(index.20[(days2*(i-1)):(days2*i)])-0.2673692*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.3771963#
stockBout8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout8uk=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin8uk); lines(spreadout8uk,col="red")#
#
####
i=12#
spreadin12uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin12uk=index.20[(days2*(i-1)):(days2*i)]#
#
i=11#
spreadout12uk=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.160233*log(index.20[(days2*(i-1)):(days2*i)])+9.950650#
stockAout12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout12uk=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin12uk); lines(spreadout12uk,col="red")#
#
####
i=16#
spreadin16uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin16uk=index.20[(days2*(i-1)):(days2*i)]#
#
i=15#
spreadout16uk=log(index.20[(days2*(i-1)):(days2*i)])-0.2716707*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.4214602#
stockBout16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout16uk=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin16uk); lines(spreadout16uk,col="red")#
#
####
i=20#
spreadin20uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.20[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin20uk=index.20[(days2*(i-1)):(days2*i)]#
#
i=19#
spreadout20uk=log(index.20[(days2*(i-1)):(days2*i)])-0.2855611*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.3344949#
stockBout20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout20uk=index.20[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin20uk); lines(spreadout20uk,col="red")#
#
rm(i)
par(mfrow=c(4,3))#
ts.plot(spreadin2uk)#
ts.plot(spreadin8uk)#
ts.plot(spreadin12uk)#
ts.plot(spreadout2uk,col="red")#
ts.plot(spreadout8uk,col="red")#
ts.plot(spreadout12uk,col="red")#
ts.plot(spreadin16uk)#
ts.plot(spreadin20uk)#
ts.plot(spreadout16uk,col="red")#
ts.plot(spreadout20uk,col="red")
ts.plot(spreadin2uk)
dev.off()
ts.plot(spreadin2uk)
ts.plot(spreadout2uk,col="red")
ts.plot(spreadout8uk,col="red")
ts.plot(spreadout12uk,col="red")
ts.plot(spreadout20uk,col="red")
par(mfrow=c(4,3))#
ts.plot(spreadin2uk)#
ts.plot(spreadin8uk)#
ts.plot(spreadin12uk)#
ts.plot(spreadout2uk,col="red")#
ts.plot(spreadout8uk,col="red")#
ts.plot(spreadout12uk,col="red")#
ts.plot(spreadin16uk)#
ts.plot(spreadin20uk)#
ts.plot(spreadout16uk,col="red")#
ts.plot(spreadout20uk,col="red")
index.8=index.retN(8,w.jan.days,ret)[[2]]
i=2#
spreadin2uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin2uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=1#
spreadout2uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5182355*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.2263834#
stockAout2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout2uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin2uk); lines(spreadout2uk,col="red")#
#
####
i=8#
spreadin8uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin8uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=7#
spreadout8uk=log(index.8[(days2*(i-1)):(days2*i)])-0.3203663*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.1697717#
stockBout8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout8uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin8uk); lines(spreadout8uk,col="red")#
#
####
i=12#
spreadin12uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin12uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=11#
spreadout12uk=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.044048*log(index.8[(days2*(i-1)):(days2*i)])+4.664923#
stockAout12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout12uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin12uk); lines(spreadout12uk,col="red")#
#
####
i=16#
spreadin16uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin16uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=15#
spreadout16uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5207551*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.0980031#
stockBout16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout16uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin16uk); lines(spreadout16uk,col="red")#
#
####
i=20#
spreadin20uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin20uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=19#
spreadout20uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5160965*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.1093597#
stockBout20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout20uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin20uk); lines(spreadout20uk,col="red")#
#
rm(i)#
#
par(mfrow=c(4,3))#
ts.plot(spreadin2uk)#
ts.plot(spreadin8uk)#
ts.plot(spreadin12uk)#
ts.plot(spreadout2uk,col="red")#
ts.plot(spreadout8uk,col="red")#
ts.plot(spreadout12uk,col="red")#
ts.plot(spreadin16uk)#
ts.plot(spreadin20uk)#
ts.plot(spreadout16uk,col="red")#
ts.plot(spreadout20uk,col="red")
ts.plot(spreadout20uk,col="red")
ts.plot(spreadout8uk,col="red")
ts.plot(spreadout12uk,col="red")
ts.plot(spreadout16uk,col="red")
par(mfrow=c(2,1))#
ts.plot(index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily log-returns of index")#
lines(ret2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
ts.plot(cumul.index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")#
lines(cumul2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)
rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp #
#
#aquire data#
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean#
#
#calculate daily log-returns#
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0#
#
#days in each month#
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))#
days=c(days,19)#
w=rbind(w,rep(0,ncol(w)))#
#
####################### KEEP WEIGHTS SAME FOR ANY GIVEN YEAR ########################
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:12){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]#
#
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}#
#
#30 stock in chosen index#
index2.30=index.retN(30,w.jan.days,ret)#
ret2.30=index2.30[[1]]#
cumul2.30=index2.30[[2]]#
#
#diagnostic check#
sd(ret2.30-index.ret2)#
#
par(mfrow=c(2,1))#
ts.plot(index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily log-returns of index")#
lines(ret2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
ts.plot(cumul.index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")#
lines(cumul2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
#check for cointegration#
#entire period#
create.spread.opt(cumul.index.ret2,cumul2.30,0.4,0.05)#
#
#### check for all combinations#
from2=4; to2=20; by2=4; days2=180; cor_thresh2=0.9; pval_thresh2=0.01#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		spread2=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.j2[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[1]]#
		print(c(spread2,i))#
	}#
	rm(spread2,index.j2,i,j)#
}#
#
### double check using Johansen Test#
maxlag2=12*(days2/100)^0.25#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		cumul.ret.all2=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])#
		cumul.ret.j2=log(index.j2[(days2*(i-1)):(days2*i)])#
		data2=data.frame(cumul.ret.all2,cumul.ret.j2)#
		varest2=VAR(data2,p=1,type="const",lag.max=maxlag2,ic="AIC")#
		lagLength2=max(maxlag2,varest2$p)#
		res2=ca.jo(data2,type="trace",ecdet="const",K=lagLength2,spec="transitory")#
		testStatistics2=res2@teststat#
		criticalValues2=res2@cval#
		if(testStatistics2[length(testStatistics2)] >= criticalValues2[length(testStatistics2)+4]){#
  			print(c(res2@V[1:(ncol(data2)+1),which.max(res2@lambda)],i))#
  		}#
	}#
	rm(index.j2,cumul.ret.all2,cumul.ret.j2,data2,varest2,lagLength2,res2,testStatistics2,criticalValues2,i,j)#
}#
#
### optimal to use 8 stocks#
index.8=index.retN(8,w.jan.days,ret)[[2]]#
i=2#
spreadin2uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin2uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=1#
spreadout2uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5182355*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.2263834#
stockAout2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout2uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin2uk); lines(spreadout2uk,col="red")#
#
####
i=8#
spreadin8uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin8uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=7#
spreadout8uk=log(index.8[(days2*(i-1)):(days2*i)])-0.3203663*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.1697717#
stockBout8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout8uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin8uk); lines(spreadout8uk,col="red")#
#
####
i=12#
spreadin12uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin12uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=11#
spreadout12uk=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.044048*log(index.8[(days2*(i-1)):(days2*i)])+4.664923#
stockAout12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout12uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin12uk); lines(spreadout12uk,col="red")#
#
####
i=16#
spreadin16uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin16uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=15#
spreadout16uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5207551*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.0980031#
stockBout16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout16uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin16uk); lines(spreadout16uk,col="red")#
#
####
i=20#
spreadin20uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin20uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=19#
spreadout20uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5160965*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.1093597#
stockBout20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout20uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin20uk); lines(spreadout20uk,col="red")#
#
rm(i)#
#
par(mfrow=c(4,3))#
ts.plot(spreadin2uk)#
ts.plot(spreadin8uk)#
ts.plot(spreadin12uk)#
ts.plot(spreadout2uk,col="red")#
ts.plot(spreadout8uk,col="red")#
ts.plot(spreadout12uk,col="red")#
ts.plot(spreadin16uk)#
ts.plot(spreadin20uk)#
ts.plot(spreadout16uk,col="red")#
ts.plot(spreadout20uk,col="red")
index2.30=index.retN(30,w.jan.days,ret)
index.retN=function(N,weights,returns){#
	index.retN=vector("numeric"); cumul.index.retN=vector("numeric")#
	cumul.index.retN[1]=100#
	index.matrix=indexN(N,weights)#
	for(i in 1:nrow(returns)){#
		index.retN[i]=sum(returns[i,][index.matrix[i,]]*weights[i,][index.matrix[i,]])#
		cumul.index.retN[i+1]=cumul.index.retN[i]*(1+index.retN[i])#
	}#
	return(list(index.retN,cumul.index.retN))#
}
index2.30=index.retN(30,w.jan.days,ret)
nrow(w.jan.days)
nrow(ret)
rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp #
#
#aquire data#
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean#
#
#calculate daily log-returns#
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0#
#
#days in each month#
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))#
days=c(days,19)#
#w=rbind(w,rep(0,ncol(w)))#
#
####################### KEEP WEIGHTS SAME FOR ANY GIVEN YEAR ########################
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:12){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]#
#
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}#
#
#30 stock in chosen index#
index2.30=index.retN(30,w.jan.days,ret)#
ret2.30=index2.30[[1]]#
cumul2.30=index2.30[[2]]
w.jan.days
dim(w.jan.days)
dim(w)
rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp #
#
#aquire data#
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean#
#
#calculate daily log-returns#
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0#
#
#days in each month#
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))#
days=c(days,19)
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:12){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}
index2.30=index.retN(30,w.jan.days,ret)
dim(w.jan.days)
rm(list=ls())#
#install.packages("R.matlab")#
#install.packages("zoo")#
#install.packages("tseries")#
#install.packages("fUnitRoots")#
#install.packages("urca")#
#install.packages("vars")#
library(tseries) #adf.test; kpss.test#
library(fUnitRoots) #adfTest#
library(urca) #ca.jo#
library(vars)#
library(R.matlab)#
library(zoo)#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Cointegration")#
source("Cointegration_functions.R")#
#
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread")#
source("Spread_functions_uk.R")#
#
ukx <- readMat("ukx.mat")#
ukximport <- ukx$pp #
#
#aquire data#
Index=ukximport[1,1,1]$Index#
tickers=ukximport[2,1,1]$tickers#
names=ukximport[3,1,1]$names#
sector=ukximport[4,1,1]$sector#
dt=Matlab2Rdate(ukximport[5,1,1]$dt)#
w=ukximport[6,1,1]$w#
px=ukximport[7,1,1]$px#
px.clean=ukximport[8,1,1]$px.clean#
#
#calculate daily log-returns#
ret=log(px.clean[2:dim(px.clean)[1],])-log(px.clean[1:(dim(px.clean)[1]-1),])#
ret[is.na(ret)]=0#
ret[is.infinite(ret)]=0#
#
#days in each month#
days=diff(seq(as.Date(dt[1]), as.Date(dt[length(dt)]), by = "month"))#
days=c(days,19)#
w=rbind(w,rep(0,ncol(w)))#
#
####################### KEEP WEIGHTS SAME FOR ANY GIVEN YEAR ########################
years=rep(0,12)#
years[1]=sum(days[1:12])#
for(i in 2:11){#
	years[i]=sum(days[1:(i*12)])-sum(days[1:((i-1)*12)])#
}#
years[12]=sum(days[133:134])#
#
# January weights replicated over entire year#
w.jan=matrix(nrow=12,ncol=dim(w)[2])#
for(i in 1:12){#
	w.jan[i,]=w[1+(i-1)*12,]#
}#
#
w.jan.days=w.jan[rep(1:nrow(w.jan), times = years), ]#
#
#cumulative returns#
index.ret2=vector("numeric"); cumul.index.ret2=vector("numeric")#
cumul.index.ret2[1]=100#
for(i in 1:nrow(ret)){#
	index.ret2[i]=sum(ret[i,]*w.jan.days[i,])#
	cumul.index.ret2[i+1]=cumul.index.ret2[i]*(1+index.ret2[i])#
}#
#
#30 stock in chosen index#
index2.30=index.retN(30,w.jan.days,ret)#
ret2.30=index2.30[[1]]#
cumul2.30=index2.30[[2]]#
#
#diagnostic check#
sd(ret2.30-index.ret2)#
#
par(mfrow=c(2,1))#
ts.plot(index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily log-returns of index")#
lines(ret2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
ts.plot(cumul.index.ret2,main="FTSE 100 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")#
lines(cumul2.30,col="red",lty=3)#
legend("bottomright",c("All stocks","Largest 30 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)#
#
#check for cointegration#
#entire period#
create.spread.opt(cumul.index.ret2,cumul2.30,0.4,0.05)#
#
#### check for all combinations#
from2=4; to2=20; by2=4; days2=180; cor_thresh2=0.9; pval_thresh2=0.01#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		spread2=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.j2[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[1]]#
		print(c(spread2,i))#
	}#
	rm(spread2,index.j2,i,j)#
}#
#
### double check using Johansen Test#
maxlag2=12*(days2/100)^0.25#
for(j in seq(from2,to2,by2)){#
	cat("\nNumber of stocks=",j,"\n\n")#
	index.j2=index.retN(j,w.jan.days,ret)[[2]]#
	for(i in 1:floor(length(cumul.index.ret2)/days2)){#
		cumul.ret.all2=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])#
		cumul.ret.j2=log(index.j2[(days2*(i-1)):(days2*i)])#
		data2=data.frame(cumul.ret.all2,cumul.ret.j2)#
		varest2=VAR(data2,p=1,type="const",lag.max=maxlag2,ic="AIC")#
		lagLength2=max(maxlag2,varest2$p)#
		res2=ca.jo(data2,type="trace",ecdet="const",K=lagLength2,spec="transitory")#
		testStatistics2=res2@teststat#
		criticalValues2=res2@cval#
		if(testStatistics2[length(testStatistics2)] >= criticalValues2[length(testStatistics2)+4]){#
  			print(c(res2@V[1:(ncol(data2)+1),which.max(res2@lambda)],i))#
  		}#
	}#
	rm(index.j2,cumul.ret.all2,cumul.ret.j2,data2,varest2,lagLength2,res2,testStatistics2,criticalValues2,i,j)#
}#
#
### optimal to use 8 stocks#
index.8=index.retN(8,w.jan.days,ret)[[2]]#
i=2#
spreadin2uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin2uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=1#
spreadout2uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5182355*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.2263834#
stockAout2uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout2uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin2uk); lines(spreadout2uk,col="red")#
#
####
i=8#
spreadin8uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin8uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=7#
spreadout8uk=log(index.8[(days2*(i-1)):(days2*i)])-0.3203663*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-3.1697717#
stockBout8uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout8uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin8uk); lines(spreadout8uk,col="red")#
#
####
i=12#
spreadin12uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockAin12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBin12uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=11#
spreadout12uk=log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.044048*log(index.8[(days2*(i-1)):(days2*i)])+4.664923#
stockAout12uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockBout12uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin12uk); lines(spreadout12uk,col="red")#
#
####
i=16#
spreadin16uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin16uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=15#
spreadout16uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5207551*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.0980031#
stockBout16uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout16uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin16uk); lines(spreadout16uk,col="red")#
#
####
i=20#
spreadin20uk=create.spread.opt(cumul.index.ret2[(days2*(i-1)):(days2*i)],index.8[(days2*(i-1)):(days2*i)],cor_thresh2,pval_thresh2)[[2]]#
stockBin20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAin20uk=index.8[(days2*(i-1)):(days2*i)]#
#
i=19#
spreadout20uk=log(index.8[(days2*(i-1)):(days2*i)])-0.5160965*log(cumul.index.ret2[(days2*(i-1)):(days2*i)])-2.1093597#
stockBout20uk=cumul.index.ret2[(days2*(i-1)):(days2*i)]#
stockAout20uk=index.8[(days2*(i-1)):(days2*i)]#
#
ts.plot(spreadin20uk); lines(spreadout20uk,col="red")#
#
rm(i)#
#
par(mfrow=c(4,3))#
ts.plot(spreadin2uk)#
ts.plot(spreadin8uk)#
ts.plot(spreadin12uk)#
ts.plot(spreadout2uk,col="red")#
ts.plot(spreadout8uk,col="red")#
ts.plot(spreadout12uk,col="red")#
ts.plot(spreadin16uk)#
ts.plot(spreadin20uk)#
ts.plot(spreadout16uk,col="red")#
ts.plot(spreadout20uk,col="red")

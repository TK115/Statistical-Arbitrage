2+2
library("swirl")
install.packages("swirl")
library("swirl")
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
\documentclass{article}
\usepackage{graphicx}
\begin{document}
\centering
\underline{\textbf{Workshop 2: R Exercise}}
%This is an example of a figure in \LaTeX. Notice that we need to center it manually with the \verb|\centering| command.
\section{PDF}\label{sec:s}
\begin{figure}[htb]
\centering
\includegraphics[width = 0.9\textwidth]{exercise.pdf}
\caption{\label{fig:example}
Horsepower vs. Miles Per Gallon as extracted by pre existing R data mtcars.}
\end{figure}
This is Figure \ref{fig:example} from Section \ref{sec:s}
%Note: If you really want pprecise control over the position of your float, then \usepackage{float} and \begin{figure}[H] should keep the figure put. Another option is \usepackage{placeins} and \FloatBarrier.
\end{document}
?xtable
install.packages("xtable")
coplot(sodium~bottle|brand) #in appendix
?dbinom
dbinom(3,6,0.1)
d
3
#include <Rcpp.h>
#include <vector>
using namespace Rcpp;
using namespace std;
// [[Rcpp::export]]
List SMC_rcpp(IntegerVector Itau,NumericVector Dist_inter_tau,double rho,
double sigma_lambda,
double sigma_Rt,
int Part=4000,
int Ttau=208) {
// find a way to have the length of each vector in the declaration
//double* force_inf=new double [Ttau*Part];
//vector<double> R_t = vector <double> (Part*Ttau,0);
NumericVector test(Ttau*Part);
NumericVector R_t(Ttau*Part);
R_t[seq(0, Part - 1)] = Rcpp::runif(Part, 0, 1.5);
NumericVector lambda_t(Ttau*Part);
lambda_t[seq(0, Part - 1)] = Rcpp::runif(Part, 0, 1);
double lambda_ini=Itau[0]/rho;
IntegerVector R_I(Ttau*Part);
for(int i=0;i<Part;i++){
R_I[i] = R::rpois(lambda_ini);
}
NumericVector weight(Ttau*Part);
int w;
for(int i=0;i<Part;i++){
double x=Itau[0];
double n=R_I[i];
weight[i]=R::dbinom(x,n,rho,w);
}
NumericVector force_inf(Ttau*Part);
IntegerVector Anc (Ttau*Part);
for (int t=1;t<Ttau;t++){
double w_ess=0;
double sum=0;
for(int i=0;i<Part;i++){
sum+=weight[i+Part*(t-1)];
w_ess+=pow(weight[i+Part*(t-1)],2); // check effective sample size in order to reasamle
};
vector<double> p(Part);
for(int i=0;i<Part;++i){
p[i]=weight[i+Part*(t-1)]/sum; // normalize weights
};
int k = Part;
IntegerVector ans(k);
rmultinom(Part, p.data(), k, ans.begin()); // Resample step
for(int i;i<k;i++){
ans[i]=floor(Part*p[i])*ans[i];
}
unsigned int counter=0;
for (int i=0;i<Part;i++ ){
for (int j=0;j<ans[i];j++){
Anc[counter+(t-1)*Part]=i;
counter++;
} 
}
int tInf=50;
if (tInf>t){
tInf=t;
};                    // takes only 50 previous time years; if more
tInf<-t;              // just ignores them; if less, it takes all the available years
//timing random walk
int TauRt=(((t+3) % 4)==0);  // changing Rt every ?? month
int TauLt=(((t+4*13-1) % (4*13))==0);  // changes by year (51.86 weeks)
for(int part=0;part<Part;part++){
//reconstruct time series of R_I from ancestry
IntegerVector serie_R_I(t);
unsigned int index = part+Part*(t-1) ;
double F=0;
for (int i=0;i<tInf;i++){
serie_R_I[i]=R_I[Anc[index] + Part*(t-(i+1))];
index= Anc[index] + Part*(t-(i+2)) ;
//Force of infection
F += (serie_R_I[i])*(Dist_inter_tau[i]);
}
force_inf[part+Part*t]=F;
//new R_t and lambda_t
if (TauRt==1){
R_t[part+Part*t]=R::rnorm((R_t[(Anc[part+Part*(t-1)]) + Part*(t-1)]),sigma_Rt);}
else {R_t[part+Part*t]=R_t[(Anc[part+Part*(t-1)]) + Part*(t-1)];}
if (TauLt==1){
lambda_t[part+Part*t]=R::rnorm(lambda_t[(Anc[part+Part*(t-1)]) + Part*(t-1)],sigma_lambda);}
else {lambda_t[part+Part*t]=lambda_t[(Anc[part+Part*(t-1)]) + Part*(t-1)];}
//	R_t[part+Part*t]=R_t[(Anc[part+Part*(t-1)]) + Part*(t-1)]+TauRt*gsl_ran_gaussian(rng,sigma_Rt);
// lambda_t[part+Part*t]=lambda_t[(Anc[part+Part*(t-1)]) + Part*(t-1)]+TauLt*gsl_ran_gaussian(rng,sigma_lambda);
if(R_t[part+Part*t]<0){(R_t[part+Part*t]=0);}
if(lambda_t[part+Part*t]<0){(lambda_t[part+Part*t]=0);}
//simulate a new R_I
R_I[part+Part*t]=R::rpois(R_t[part+Part*t]*force_inf[part+Part*t]+lambda_t[part+Part*t]);
// weight particle
double n=R_I[part+Part*t];
double x=Itau[t];
weight[part+Part*t]=R::dbinom(x,n,rho,w);
}
}
double log_likelihood;
for(int i=0;i<Ttau;i++){ . // balances the absence of a prior
double l=0;
for(int j=0;j<Part;j++){ 
l+= weight[ j + Part*i ]; 
}
log_likelihood += log(l/Part);
}  
int t=Ttau-1;
double sum=0;
for(int i=0;i<Part;i++){
sum+=weight[i+Part*(t-1)];
};
vector<double> p(Part);
for(int i=0;i<Part;++i){
p[i]=weight[i+Part*(t-1)]/sum; // normalize weights
};
int k = Part;
IntegerVector ans(k);
rmultinom(Part, p.data(), k, ans.begin()); // Resample step
unsigned int counter=0;
for (int i=0;i<Part;i++ ){
for (int j=0;j<ans[i];j++){
Anc[counter+(t-1)*Part]=i;
counter++;
} 
}
NumericVector Final_R_t(Ttau);
NumericVector Final_lambda_t(Ttau);
IntegerVector Final_R_I (Ttau);
//reconstruct time series of R_I from ancestry
unsigned int index = 0+Part*(Ttau-1) ;
for(int t=0;t<Ttau;t++){
Final_R_I[Ttau-(t+1)]=R_I[ Anc[index] + Part*(Ttau-(t+1))];
Final_R_t[Ttau-(t+1)]=R_t[ Anc[index] + Part*(Ttau-(t+1))];
Final_lambda_t[Ttau-(t+1)]=lambda_t[ Anc[index] + Part*(Ttau-(t+1))];
index= Anc[index] + Part*(Ttau-(t+2)) ; }
//double sum_rho;
//double* per=new double [Ttau];
// for(int i=0;i<Ttau;i++){
// per[i]=Itau[i]/Final_R_I[i+1];                                              
// if(isnan(per[i]=1)){
//  per[i]=1;
// }
// sum_rho+=per[i];
// }
// rho=sum_rho/Ttau;
//int test=5+R::rpois(2);
return Rcpp::List::create(Rcpp::Named("log_likeihod")= log_likelihood,
Rcpp::Named("R_I")= Final_R_I,
Rcpp::Named("R_t")=Final_R_t,
Rcpp::Named("lambda_t")=Final_lambda_t,
Rcpp::Named("weight")=weight,
Rcpp::Named("rho")=rho);
}
return Rcpp::List::create(Rcpp::Named("log_likeihod")= log_likelihood,
#include <Rcpp.h>
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//
/*** R
timesTwo(42)
*/
timesTwo(42)
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
using namespace Rcpp;
#include <Rcpp.h>
using namespace Rcpp;
timesTwo(42)
/*** R
timesTwo(42)
*/
?rnorm
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
T=200; df=2
x=vector("numeric")
y=vector("numeric")
x[1]=rt(1,df=df)
for(n in 1:(T+1)){
x[n+1]=rho*x[n]+tau*rt(1,df=df)
y[n]=x[n]+sigma*rt(1,df=df)
}
rho=0.8; tau=1; sigma=0.5; T=200; df=2 #0<df<1 possible
### Calculate y_[0:T] and trajectory x*_[0:T]
x=vector("numeric")
y=vector("numeric")
x[1]=rt(1,df=df)
for(n in 1:(T+1)){
x[n+1]=rho*x[n]+tau*rt(1,df=df)
y[n]=x[n]+sigma*rt(1,df=df)
}
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1 #N=
rho_0=0.8; tau_0=1.0; sigma_0=0.5
N=1000
nsteps=100
test=gmhpfull(rho_0,tau_0,sigma_0,sigma_rho,sigma_tau,sigma_sigma,nsteps,y,df,N,T);
test.rho=test[[1]]
test.tau=test[[2]]
test.sigma=test[[3]]
loglik=log(test[[4]]
)
hist(test.rho)
hist(test.tau)
hist(test.sigma)
par(mfrow=c(2,2))
hist(test.rho,breaks=50,main="Histogram of rho with N=1000",xlab="Rho")
hist(test.tau,breaks=50,main="Histogram of tau with N=1000",xlab="Tau")
hist(test.sigma,breaks=50,main="Histogram of sigma with N=1000",xlab="Sigma")
plot(loglik,main="Burn-in phase",xlab="Iterations",ylab="log-likelihood",type="l")
par(mfrow=c(2,2))
hist(test.rho,breaks=50,main="Histogram of rho with N=1000",xlab="Rho")
hist(test.tau,breaks=50,main="Histogram of tau with N=1000",xlab="Tau")
hist(test.sigma,breaks=50,main="Histogram of sigma with N=1000",xlab="Sigma")
plot(loglik,main="Burn-in phase",xlab="Iterations",ylab="log-likelihood",type="l")
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
rho_0=0.8; tau_0=1.0; sigma_0=0.5; nsteps=100; N=1000
test=gmhpfull(rho_0,tau_0,sigma_0,sigma_rho,sigma_tau,sigma_sigma,nsteps,y,df,N,T);
#remove burn-in
test.rho=test[[1]][-(1:(floor(nsteps/10)))]
test.tau=test[[2]][-(1:(floor(nsteps/10)))]
test.sigma=test[[3]][-(1:(floor(nsteps/10)))]
loglik=log(test[[4]][1:(floor(nsteps/10))])
# acceptance probability
1-rejectionRate(mcmc(test.rho)) #0.17
1-rejectionRate(mcmc(test.tau)) #0.27
1-rejectionRate(mcmc(test.sigma)) #0.26
par(mfrow=c(2,2))
hist(test.rho,breaks=50,main="Histogram of rho with N=1000",xlab="Rho")
hist(test.tau,breaks=50,main="Histogram of tau with N=1000",xlab="Tau")
hist(test.sigma,breaks=50,main="Histogram of sigma with N=1000",xlab="Sigma")
plot(loglik,main="Burn-in phase",xlab="Iterations",ylab="log-likelihood",type="l")
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
test=gmhpfull(rho_0,tau_0,sigma_0,sigma_rho,sigma_tau,sigma_sigma,nsteps,y,df,N,T);
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
test=gmhpfull(rho_0,tau_0,sigma_0,sigma_rho,sigma_tau,sigma_sigma,nsteps,y,df,N,T);
library(coda)
library(doParallel)
install.packages("doParallel")
install.packages("doParallel")
library(doParallel)
library(doParallel)
rm(list=ls())
library(pscl)
library(truncnorm)
library(coda)
library(tseries)
library(TTR)
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread Data Applied")
source("SMC2_functions_spread_data.R")
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Spread Data Applied")
source("Trading_strategy_functions.R")
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/Risk Management")
source("Return_distribution_functions.R")
rho=0.9; tau=0.025; sigma=0.01; df=6; T=252; sig_WN=0.07
N=10000; sigma_rho=0.05; sigma_tau=0.15; sigma_sigma=0.1
h=1; ci.l=0.025; ci.u=0.975; os=2; cs=0.75; ol=-2; cl=-0.75
risk=-0.5; exit_short=3; exit_long=-3; ess=0.33
run.bb=strategy.return.dist.bb(n=10000,type='realistic')
return.bb=run.bb[[1]]
mean(return.bb); sd(return.bb)
return2.bb=run.bb[[2]]
mean(return2.bb); sd(return2.bb)
return.z.bb=run.bb[[3]]
mean(return.z.bb); sd(return.z.bb)
return_risk.bb=run.bb[[4]]
mean(return_risk.bb); sd(return_risk.bb)
return2_risk.bb=run.bb[[5]]
mean(return2_risk.bb); sd(return2_risk.bb)
return.z_risk.bb=run.bb[[6]]
mean(return.z_risk.bb); sd(return.z_risk.bb)
ADF.bb=run.bb[[7]]
mean(ADF.bb); sd(ADF.bb)
return.bb=return.bb-0.23
return2.bb=return2.bb-0.23
return.z.bb=return.z.bb-0.3
return_risk.bb=return_risk.bb-0.23
return2_risk.bb=return2_risk.bb-0.23
return.z_risk.bb=return.z_risk.bb-0.3
return.bb=c(return.bb[101:10000],rnorm(100,mean=-0.75,sd=0.2))
return2.bb=c(return2.bb[101:10000],rnorm(100,mean=-0.75,sd=0.2))
return.z.bb=c(return.z.bb[101:10000],rnorm(100,mean=-0.75,sd=0.2))
return_risk.bb=c(return_risk.bb[201:10000],rnorm(200,mean=-0.5,sd=0.1))
return2_risk.bb=c(return2_risk.bb[201:10000],rnorm(200,mean=-0.5,sd=0.1))
return.z_risk.bb=c(return.z_risk.bb[201:10000],rnorm(200,mean=-0.5,sd=0.1))
par(mfrow=c(2,2))
hist(return.bb,breaks=50,main="Returns with Mean-Reversion Strategy t-Model",xlab="Cumulative Returns",xlim=c(-0.9,1))
hist(return2.bb,breaks=50,main="Returns with Band-Reversion Strategy t-Model",xlab="Cumulative Returns",xlim=c(-0.9,2))
hist(return_risk.bb,breaks=50,main="Returns with Risk Mean-Reversion Strategy t-Model",xlab="Cumulative Returns")
hist(return2_risk.bb,breaks=50,main="Returns with Risk Band-Reversion Strategy t-Model",xlab="Cumulative Returns")

rm(spread,index.j)
}
### double check using Johansen Test
maxlag=12*(days/100)^0.25
for(j in seq(from,to,by)){
cat("\nNumber of stocks=",j,"\n\n")
index.j=index.retN(j,w.days,ret)[[2]]
for(i in 1:floor(length(cumul.index.ret)/days)){
cumul.ret.all=log(cumul.index.ret[(days*(i-1)):(days*i)])
cumul.ret.j=log(index.j[(days*(i-1)):(days*i)])
data=data.frame(cumul.ret.all,cumul.ret.j)
varest=VAR(data,p=1,type="const",lag.max=maxlag,ic="AIC")
lagLength=max(maxlag,varest$p)
res=ca.jo(data,type="trace",ecdet="const",K=lagLength,spec="transitory")
testStatistics=res@teststat
criticalValues=res@cval
if(testStatistics[length(testStatistics)] >= criticalValues[length(testStatistics)+4]){
print(c(res@V[1:(ncol(data)+1),which.max(res@lambda)],i))
}
}
rm(index.j,cumul.ret.all,cumul.ret.j,data,varest,lagLength,res,testStatistics,criticalValues)
}
i=20
j=20
index.j=index.retN(j,w.days,ret)[[2]]
y=create.spread.opt(cumul.index.ret[(days*(i-1)):(days*i)],index.j[(days*(i-1)):(days*i)],cor_thresh,pval_thresh)[[2]]
ts.plot(y)
dev.off()
ts.plot(y)
install.packages("pscl")
install.packages("truncnorm")
library(pscl)
library(truncnorm)
library(coda)
setwd("/Users/tillkischkat/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/SMC^2:Sequential PF")
source("SMC2_functions.R")
df=2
T=length(y)-1
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
sigma_rho=0.01; sigma_tau=0.01; sigma_sigma=0.01
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
plot(sigma_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
log(1)
tau_m
loglik
run[[5]]
log(0.5)
log(0.99)
log(0.001)
View(create.spread.opt)
View(create.spread.opt)
View(gmhp.one)
View(gmhp.one)
View(index.retN)
View(create.spread.opt)
y
x=vector("numeric")
y1=vector("numeric")
x[1]=rt(1,df=df)
for(n in 1:(T+1)){
x[n+1]=rho*x[n]+tau*rt(1,df=df)
y1[n]=x[n]+sigma*rt(1,df=df)
}
rho=0.8; tau=1; sigma=0.5; T=200; df=2
x=vector("numeric")
y1=vector("numeric")
x[1]=rt(1,df=df)
for(n in 1:(T+1)){
x[n+1]=rho*x[n]+tau*rt(1,df=df)
y1[n]=x[n]+sigma*rt(1,df=df)
}
T=length(y)-1
ts.plot(y)
ts.plot(y1)
dt(2,df=3)
dt(-2,df=3)
log(1.001)
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
rho=0.8; tau=1; sigma=0.5; T=200; df=2
run=smc2(N=N,T=T,y=y1,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
abline(h=0.8,col="red")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
abline(h=0.5,col="red")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
abline(h=1,col="red")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
ts.plot(y1)
ts.plot(y)
y2=y
y=y[1:100]
source("SMC2_functions.R")
N=10000; sigma_rho=0.001; sigma_tau=0.001; sigma_sigma=0.001
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
T=length(y)-1
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
run[[6]]
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
abline(h=0.8,col="red")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
abline(h=0.5,col="red")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
abline(h=1,col="red")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
1/0.08*0.35
dt(0,df=2)
dt(0,df=infinity)
?dt
dt(0,df=Inf)
dt(0,df=0.0001)
1/0.08*0.035
dt(0,df=1)
dt(0,df=0.5)
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
df=0.3
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
abline(h=0.8,col="red")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
abline(h=0.5,col="red")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
abline(h=1,col="red")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
y=y2
T=length(y)-1
length(y)
run[[6]]
source("SMC2_functions.R")
df=0.1
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
df
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
abline(h=0.8,col="red")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
abline(h=0.5,col="red")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
abline(h=1,col="red")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
df=0.2
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l",ylim=c(0,1))
abline(h=0.8,col="red")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
abline(h=0.5,col="red")
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
abline(h=1,col="red")
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
df=0.25
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
tau_m
sigma_m
df=0.28
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,3))
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,3))
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
df=0.26
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,0.5))
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,0.5))
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
acf(y)
y
df=0.25
df=0.27
N=10000; sigma_rho=0.1; sigma_tau=0.1; sigma_sigma=0.1
run=smc2(N=N,T=T,y=y,df=df,sigma_rho=sigma_rho,sigma_tau=sigma_tau,sigma_sigma=sigma_sigma)
rho_m=run[[1]]
sigma_m=run[[2]]
tau_m=run[[3]]
loglik=run[[4]]
#count
run[[5]]
par(mfrow=c(2,2))
plot(rho_m,ylab=expression(rho),xlab="Time",type="l")
plot(sigma_m,ylab=expression(sigma),xlab="Time",type="l",ylim=c(0,0.4))
plot(tau_m,ylab=expression(tau),xlab="Time",type="l",ylim=c(0,0.4))
plot(loglik,ylab=expression(logp[y[0:t]]),xlab="Time",type="l")
par(mfrow=c(2,1))
ts.plot(index.ret,main="S&P 500 1.1.1990-19.3.2014",ylab="Daily log-returns of index")
lines(ret100,col="red",lty=3)
legend("bottomright",c("All stocks","Largest 100 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)
ts.plot(cumul.index.ret,main="S&P 500 1.1.1990-19.3.2014",ylab="Daily cumulative log-returns of index")
lines(cumul100,col="red",lty=3)
legend("bottomright",c("All stocks","Largest 100 stocks"),lty=c(1,3),col=c("black","red"),cex=0.5)
ts.plot(y1)
par(mfrow=c(1,1))
ts.plot(y1)
p1<-function(N,T,y,rho,tau,sigma,df){
yy=matrix(y[1:(T+1)],byrow=TRUE,nrow=N,ncol=T+1)
xx=matrix(nrow=N,ncol=T+1)
w=matrix(nrow=N,ncol=T+1)
ww=matrix(nrow=N,ncol=T+1)
xx_res=matrix(nrow=N,ncol=T+1)
xx[,1]=rt(N,df=df)
w[,1]=1/N
ww[,1]=w[,1]/sum(w[,1])
xx_res[,1]=xx[,1]
for(i in 1:T){
xx[,i+1]=rho*xx_res[,i]+tau*rt(N,df=df)
w[,i+1]=1/sigma*dt((yy[,i+1]-xx[,i+1])/sigma,df=df)
ww[,i+1]=w[,i+1]/sum(w[,i+1])
#adaptive resampling
if(1/sum(ww[,i+1]^2)>N/3) xx_res[,i+1]=xx[,i+1]
else xx_res[,i+1]=sample(xx[,i+1],size=N,prob=ww[,i+1],replace=TRUE)
}
#p=prod(colMeans(w))
p=log(colMeans(w))
return(p)
}
a=p1(N=10000,T=length(y)-1,y=y1,rho=rho,tau=tau,sigma=sigma,df=df)
ts.plot(a)
p1<-function(N,T,y,rho,tau,sigma,df){
yy=matrix(y[1:(T+1)],byrow=TRUE,nrow=N,ncol=T+1)
xx=matrix(nrow=N,ncol=T+1)
w=matrix(nrow=N,ncol=T+1)
ww=matrix(nrow=N,ncol=T+1)
xx_res=matrix(nrow=N,ncol=T+1)
xx[,1]=rt(N,df=df)
w[,1]=1/N
ww[,1]=w[,1]/sum(w[,1])
xx_res[,1]=xx[,1]
for(i in 1:T){
xx[,i+1]=rho*xx_res[,i]+tau*rt(N,df=df)
w[,i+1]=1/sigma*dt((yy[,i+1]-xx[,i+1])/sigma,df=df)
ww[,i+1]=w[,i+1]/sum(w[,i+1])
#adaptive resampling
if(1/sum(ww[,i+1]^2)>N*10^9/3) xx_res[,i+1]=xx[,i+1]
else xx_res[,i+1]=sample(xx[,i+1],size=N,prob=ww[,i+1],replace=TRUE)
}
#p=prod(colMeans(w))
p=log(colMeans(w))
return(p)
}
b=p1(N=10000,T=length(y)-1,y=y1,rho=rho,tau=tau,sigma=sigma,df=df)
ts.plot(b)
a-b
install.packages('Rcpp')
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Rcpp::sourceCpp('~/Desktop/test.cpp')
Rcpp::sourceCpp('~/Desktop/test.cpp')
timesTwo(100)
Rcpp::sourceCpp('~/Desktop/test.cpp')
test<-PF_rcpp(y,rho,tau,sigma,df)
df
length(y)
length(y1)
df=2
test<-PF_rcpp(y1,rho,tau,sigma,df)
T
T=200
test<-PF_rcpp(y1,rho,tau,sigma,df)
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
Rcpp::sourceCpp('~/Desktop/test.cpp')
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
Rcpp::sourceCpp('~/Desktop/test.cpp')
PF_rcpp(y1,rho,tau,sigma,df)
w<-PF_rcpp(y1,rho,tau,sigma,df)[[2]]
p=exp(sum(log(colMeans(w))))
p
log(p)
detach("package:Rcpp", unload=TRUE)
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
w=PF_rcpp(y1,rho,tau,sigma,df)[[2]]
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y1,rho,tau,sigma,df,N=10000,T=length(y1)-1)[[2]]
p=exp(sum(log(colMeans(w))))
p
sum(log(colMeans(w)))
ts.plot(y1)
rho
tau
df
w=PF_rcpp(y1,rho,tau,sigma,df,N=100000,T=length(y1)-1)[[2]]
p=exp(sum(log(colMeans(w))))
p
p(N=1000,T=length(y1)-1,y=y1,rho=rho,tau=tau,sigma=sigma,df=df)
p<-function(N,T,y,rho,tau,sigma,df){
yy=matrix(y[1:(T+1)],byrow=TRUE,nrow=N,ncol=T+1)
xx=matrix(nrow=N,ncol=T+1)
w=matrix(nrow=N,ncol=T+1)
ww=matrix(nrow=N,ncol=T+1)
xx_res=matrix(nrow=N,ncol=T+1)
xx[,1]=rt(N,df=df)
w[,1]=1/N
ww[,1]=w[,1]/sum(w[,1])
xx_res[,1]=xx[,1]
for(i in 1:T){
xx[,i+1]=rho*xx_res[,i]+tau*rt(N,df=df)
w[,i+1]=1/sigma*dt((yy[,i+1]-xx[,i+1])/sigma,df=df)
ww[,i+1]=w[,i+1]/sum(w[,i+1])
#adaptive resampling
if(1/sum(ww[,i+1]^2)>N/3) xx_res[,i+1]=xx[,i+1]
else xx_res[,i+1]=sample(xx[,i+1],size=N,prob=ww[,i+1],replace=TRUE)
}
#p=prod(colMeans(w))
p=exp(sum(log(colMeans(w))))
return(p)
}
p(N=1000,T=length(y1)-1,y=y1,rho=rho,tau=tau,sigma=sigma,df=df)
log(3.898977e-208)
w=PF_rcpp(y1,rho,tau,sigma,df,N=1000,T=length(y1)-1)[[2]]
p=exp(sum(log(colMeans(w))))
o
p
sum(log(colMeans(w)))
rho=0.8; tau=1; sigma=0.5; T=200; df=2 #0<df<1 possible
### Calculate y_[0:T] and trajectory x*_[0:T]
x=vector("numeric")
y=vector("numeric")
x[1]=rt(1,df=df)
for(n in 1:(T+1)){
x[n+1]=rho*x[n]+tau*rt(1,df=df)
y[n]=x[n]+sigma*rt(1,df=df)
}
N
N=1000
p(N=N,T=T,y=y,rho=rho,tau=tau,sigma=sigma,df=df)
p<-function(N,T,y,rho,tau,sigma,df){
yy=matrix(y[1:(T+1)],byrow=TRUE,nrow=N,ncol=T+1)
xx=matrix(nrow=N,ncol=T+1)
w=matrix(nrow=N,ncol=T+1)
ww=matrix(nrow=N,ncol=T+1)
xx_res=matrix(nrow=N,ncol=T+1)
xx[,1]=rt(N,df=df)
w[,1]=1/N
ww[,1]=w[,1]/sum(w[,1])
xx_res[,1]=xx[,1]
for(i in 1:T){
xx[,i+1]=rho*xx_res[,i]+tau*rt(N,df=df)
w[,i+1]=1/sigma*dt((yy[,i+1]-xx[,i+1])/sigma,df=df)
ww[,i+1]=w[,i+1]/sum(w[,i+1])
#adaptive resampling
if(1/sum(ww[,i+1]^2)>N/3) xx_res[,i+1]=xx[,i+1]
else xx_res[,i+1]=sample(xx[,i+1],size=N,prob=ww[,i+1],replace=TRUE)
}
#p=prod(colMeans(w))
p=exp(sum(log(colMeans(w))))
return(p)
}
log(p(N=N,T=T,y=y,rho=rho,tau=tau,sigma=sigma,df=df))
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T[[2]]
)
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
w=PF_rcpp(y=y,rho=rho,tau=tau,sigma=sigma,df=df,N=N,T=T)[[2]]
sum(log(colMeans(w)))
detach("package:RcppArmadillo", unload=TRUE)
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
library(Rcpp)
library(RcppAr)
Rcpp::sourceCpp('~/Desktop/MSc Statistics/Trimester 3/Statistical Arbitrage/R:MATLAB Code/PMCMC R/p.cpp')
